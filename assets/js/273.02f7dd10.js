(window.webpackJsonp=window.webpackJsonp||[]).push([[273],{544:function(e,s,t){"use strict";t.r(s);var a=t(10),n=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"vue源码-开始"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue源码-开始"}},[e._v("#")]),e._v(" vue源码 - 开始")]),e._v(" "),s("h2",{attrs:{id:"_1、源码目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、源码目录"}},[e._v("#")]),e._v(" 1、源码目录")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("├── benchmarks                  性能、基准测试\n├── dist                        构建打包的输出目录\n├── examples                    案例目录\n├── flow                        flow 语法的类型声明\n├── packages                    一些额外的包，比如：负责服务端渲染的包 vue-server-renderer、配合 vue-loader 使用的的 vue-template-compiler，还有 weex 相关的\n│   ├── vue-server-renderer\n│   ├── vue-template-compiler\n│   ├── weex-template-compiler\n│   └── weex-vue-framework\n├── scripts                     所有的配置文件的存放位置，比如 rollup 的配置文件\n├── src                         vue 源码目录\n│   ├── compiler                编译器\n│   ├── core                    运行时的核心包\n│   │   ├── components          全局组件，比如 keep-alive\n│   │   ├── config.js           一些默认配置项\n│   │   ├── global-api          全局 API，比如熟悉的：Vue.use()、Vue.component() 等\n│   │   ├── instance            Vue 实例相关的，比如 Vue 构造函数就在这个目录下\n│   │   ├── observer            响应式原理\n│   │   ├── util                工具方法\n│   │   └── vdom                虚拟 DOM 相关，比如熟悉的 patch 算法就在这儿\n│   ├── platforms               平台相关的编译器代码\n│   │   ├── web\n│   │   └── weex\n│   ├── server                  服务端渲染相关\n├── test                        测试目录\n├── types                       TS 类型声明\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br")])]),s("h2",{attrs:{id:"_2、流程总图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、流程总图"}},[e._v("#")]),e._v(" 2、流程总图")]),e._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"流程总图",href:"/blog/img/web/js/page_20.png"}},[s("img",{attrs:{src:e.$withBase("/img/web/js/page_20.png"),alt:"流程总图"}})])]),e._v(" "),s("h2",{attrs:{id:"_3、流程总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、流程总结"}},[e._v("#")]),e._v(" 3、流程总结")]),e._v(" "),s("p",[e._v("new Vue => this._init => 调用一些初始化方法，其中包含 initState 方法 => 进入响应式流程 => 初始化了一些方法，并使用 Object.defineProperty 劫持了 getter 和 setter 方法 => getter调用 dep.depend 收集依赖，setter 调用 dep.nottify 通知更新 => Dep.notify 调用 watcher.update，然后就进入了异步更新阶段 => 做了一些判断，最后会调用 nextTick 方法 => 再调用 timerFunc 方法，优先使用微任务，然后宏任务，Promise => MutationObserver => setImmediate => setTimeout，其意愿总是尽快执行 => 然后调用 watcher.run => watcher.get => 重置调度状态。")]),e._v(" "),s("p",[e._v("挂载阶段：进入挂载阶段会调用 beforeMount 钩子 => new Watcher => 回调 updateComponent 方法 => 继续调用 _update() => 然后进入 __patch__阶段，也就是VNode节点的创建以及更新 => 经过一些逻辑处理，最终调用 patchVnode 方法更新节点 => 然后判断新旧节点是否存在子节点 => 进入 diff 过程")]),e._v(" "),s("h2",{attrs:{id:"_4、参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、参考"}},[e._v("#")]),e._v(" 4、参考")]),e._v(" "),s("p",[e._v("https://juejin.cn/post/6949370458793836580")])])}),[],!1,null,null,null);s.default=n.exports}}]);