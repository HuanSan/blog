(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{405:function(t,s,a){"use strict";a.r(s);var e=a(10),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"es6-es13新特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6-es13新特性"}},[t._v("#")]),t._v(" ES6-ES13新特性")]),t._v(" "),s("h2",{attrs:{id:"es6-ecmascript-2015"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6-ecmascript-2015"}},[t._v("#")]),t._v(" ES6(ECMAScript 2015)")]),t._v(" "),s("p",[t._v("ES6 正式支持了类、模块、迭代器、生成器、箭头函数、Promise、反射、代理和众多新的数据类型")]),t._v(" "),s("ul",[s("li",[t._v("let 和 const")]),t._v(" "),s("li",[t._v("解构赋值")]),t._v(" "),s("li",[t._v("模板字符串")]),t._v(" "),s("li",[t._v("函数参数默认值和箭头函数")]),t._v(" "),s("li",[t._v("扩展运算符")]),t._v(" "),s("li",[t._v("对象的属性简写")]),t._v(" "),s("li",[t._v("super 关键字")]),t._v(" "),s("li",[t._v("Symbol 变量")]),t._v(" "),s("li",[t._v("Set 和 Map 数据")]),t._v(" "),s("li",[t._v("代理和反射")]),t._v(" "),s("li",[t._v("迭代器")]),t._v(" "),s("li",[t._v("Promise")]),t._v(" "),s("li",[t._v("class 类")]),t._v(" "),s("li",[t._v("Module 模块")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://es6.ruanyifeng.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("es6"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"es7-ecmascript-2016"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es7-ecmascript-2016"}},[t._v("#")]),t._v(" ES7(ECMAScript 2016)")]),t._v(" "),s("p",[t._v("ECMAScript 2016 中添加了以下功能：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Array.prototype.includes()")]),t._v(" 检查数组是否包含给定值。")]),t._v(" "),s("li",[s("code",[t._v("求幂运算符 (**)")]),t._v(": "),s("code",[t._v("4 ** 2 => 16")])])]),t._v(" "),s("h2",{attrs:{id:"es8-ecmascript-2017"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es8-ecmascript-2017"}},[t._v("#")]),t._v(" es8(ECMAScript 2017)")]),t._v(" "),s("p",[t._v("ECMAScript 2017 中添加了以下功能：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("异步函数(async/await)")]),t._v("让我们使用看起来像同步的语法来编写异步代码。")]),t._v(" "),s("li",[s("code",[t._v("Object.values()")]),t._v(" 返回一个数组，其中包含给定对象的所有可枚举字符串键属性的值。")]),t._v(" "),s("li",[s("code",[t._v("Object.entries()")]),t._v(" 返回一个数组，其中包含给定对象的所有可枚举字符串键属性的键值对。每对都被编码为一个二元素数组。")]),t._v(" "),s("li",[s("code",[t._v("字符串填充")]),t._v("：字符串方法 "),s("code",[t._v("String.padStart()")]),t._v(" 和 "),s("code",[t._v("String.padEnd()")]),t._v(" 插入填充文本，直到接收者足够长："),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'7'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("padStart")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '007'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yes'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("padEnd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'yes!!!'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])]),t._v(" "),s("li",[s("code",[t._v("函数参数列表和调用中的尾随逗号")]),t._v("：自 ES3 以来，数组文字和自 ES5 以来的对象文字中都允许使用尾随逗号。它们现在也允许在函数调用和方法调用中使用。")]),t._v(" "),s("li",[s("code",[t._v("Object.getOwnPropertyDescriptors()")])]),t._v(" "),s("li",[s("code",[t._v("共享内存和原子")]),t._v(" ("),s("a",{attrs:{href:"https://github.com/tc39/proposal-ecmascript-sharedmem",target:"_blank",rel:"noopener noreferrer"}},[t._v("见提案"),s("OutboundLink")],1),t._v(")")])]),t._v(" "),s("h2",{attrs:{id:"es9-ecmascript-2018"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es9-ecmascript-2018"}},[t._v("#")]),t._v(" ES9(ECMAScript 2018)")]),t._v(" "),s("p",[t._v("ECMAScript 2018 中添加了以下功能：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("异步迭代是同步迭代的异步版本")]),t._v("。它基于 Promise：\n"),s("ul",[s("li",[t._v("使用同步迭代，我们可以立即访问每个项目。使用异步迭代，我们必须 await 在访问项目之前。")]),t._v(" "),s("li",[t._v("对于同步迭代，我们使用 for-of 循环。对于异步迭代，我们使用 for-await-of 循环。")])])]),t._v(" "),s("li",[s("code",[t._v("传播到对象文字中")]),t._v("：通过在对象文字中使用传播（...），我们可以将另一个对象的属性复制到当前对象中。一个用例是创建对象的浅拷贝obj："),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" shallowCopy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])]),t._v(" "),s("li",[s("code",[t._v("解构属性")]),t._v("：当对象解构一个值时，我们现在可以使用解构语法（...）来获取一个对象中所有以前未提及的属性。"),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("remaining"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nassert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepEqual")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("remaining"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])]),t._v(" "),s("li",[s("code",[t._v("Promise.prototype.finally()")]),t._v(" 与 finally try-catch-finally 语句的子句相关——类似于 Promise 方法如何.then() 与 try 子句 .catch() 相关并与 catch 子句相关。\n换句话说：.finally() 无论 Promise 是否被履行或拒绝，都会执行回调。")]),t._v(" "),s("li",[s("code",[t._v("新的正则表达式功能")])]),t._v(" "),s("li",[s("code",[t._v("模板文字修订")]),t._v(" 允许在标记模板中带有反斜杠的文本在字符串文字中是非法的")])]),t._v(" "),s("h2",{attrs:{id:"es10-ecmascript-2019"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es10-ecmascript-2019"}},[t._v("#")]),t._v(" ES10(ECMAScript 2019)")]),t._v(" "),s("p",[t._v("ECMAScript 2019 中添加了以下功能：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Array.prototype.flatMap()")]),t._v(" 工作方式类似.map()，但让回调返回零个或多个值的数组，而不是单个值。然后将返回的数组连接起来并成为 .flatMap() 用例包括：\n"),s("ul",[s("li",[t._v("同时过滤和映射")]),t._v(" "),s("li",[t._v("将单个输入值映射到多个输出值")])])]),t._v(" "),s("li",[s("code",[t._v("Array.prototype.flat()")]),t._v(" 将嵌套数组转换为平面数组。或者，我们可以告诉它应该在哪个嵌套深度停止展平。")]),t._v(" "),s("li",[s("code",[t._v("Object.fromEntries()")]),t._v(" 从可迭代的条目创建一个对象。每个条目都是一个包含属性键和属性值的二元素数组。")]),t._v(" "),s("li",[s("code",[t._v("字符串方法")]),t._v("："),s("code",[t._v(".trimStart()")]),t._v(" 工作方式 "),s("code",[t._v(".trimEnd()")]),t._v(" 类似 "),s("code",[t._v(".trim()")]),t._v("，但仅在字符串的开头或结尾删除空格。")]),t._v(" "),s("li",[s("code",[t._v("可选catch")]),t._v("：如果我们不使用它，我们现在可以省略子句的参数。")]),t._v(" "),s("li",[s("code",[t._v("Symbol.prototype.description")]),t._v(" 是读取符号的描述。以前，描述包含在结果中，.toString() 但无法单独访问。")]),t._v(" "),s("li",[s("code",[t._v("JSON 超集")])]),t._v(" "),s("li",[s("code",[t._v("格式良好JSON.stringify()")])]),t._v(" "),s("li",[s("code",[t._v("Function.prototype.toString()修订")])])]),t._v(" "),s("h2",{attrs:{id:"es11-ecmascript-2020"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es11-ecmascript-2020"}},[t._v("#")]),t._v(" ES11(ECMAScript 2020)")]),t._v(" "),s("p",[t._v("ECMAScript 2020 中添加了以下功能：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("新模块功能")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("动态导入 import()：正常的 import 语句是静态的：我们只能在模块的顶层使用它，它的模块说明符是一个固定的字符串。import() 改变了这一点。它可以在任何地方使用（包括条件语句），我们可以计算它的参数。")]),t._v(" "),s("li",[t._v("import.meta 包含当前模块的元数据。它的第一个广泛支持的属性是 import.meta.url 包含一个带有当前模块文件 URL 的字符串。")]),t._v(" "),s("li",[t._v("命名空间重新导出：以下表达式导入'mod'命名空间对象中模块的所有导出ns并导出该对象。"),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("export * as ns from 'mod';")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("属性访问和方法调用的可选链接")]),t._v("。可选链接的一个示例是：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("value.?prop")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("此表达式的计算结果为 undefined。否则，它的计算结果为value.prop。当某些属性可能丢失时，此功能在属性读取链中特别有用。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("空值合并运算符 (??)")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" defaultValue\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("该运算符允许我们在缺少某些内容时使用默认值。\n以前在这种情况下使用了逻辑或运算符 (||)，但它在这里有缺点，因为只要左侧是假的（这并不总是正确的），它就会返回默认值。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Bigints – 任意精度整数")]),t._v("：Bigints 是一种新的原始类型。它支持可以任意大的整数（它们的存储会根据需要增长）。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("String.prototype.matchAll()/g")]),t._v("：如果未设置标志，则此方法抛出，并返回一个包含给定字符串的所有匹配对象的可迭代对象。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Promise.allSettled()")]),t._v(" 接收一个可迭代的 Promises。它返回一个 Promise，一旦所有输入的 Promise 都被解决，该 Promise 就会实现。实现值是一个数组，每个输入 Promise 有一个对象——以下之一：")]),t._v(" "),s("ul",[s("li",[t._v("{ status: 'fulfilled', value: «fulfillment value» }")]),t._v(" "),s("li",[t._v("{ status: 'rejected', reason: «rejection value» }")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("globalThis")]),t._v(" 提供了一种访问全局对象的方法，该对象可在浏览器和服务器端平台（如 Node.js 和 Deno）上运行。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("for-in")]),t._v(": 在 JavaScript 中部分指定对象枚举顺序")])])]),t._v(" "),s("h2",{attrs:{id:"es12-ecmascript-2021"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es12-ecmascript-2021"}},[t._v("#")]),t._v(" ES12(ECMAScript 2021)")]),t._v(" "),s("p",[t._v("ECMAScript 2021 中添加了以下功能：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("String.prototype.replaceAll()")]),t._v(" 让我们替换正则表达式或字符串的所有匹配项（.replace()仅替换第一次出现的字符串）："),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abbbaab'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'axxxaax'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])]),t._v(" "),s("li",[s("code",[t._v("Promise.any() 和 AggregateError")]),t._v("：Promise.any() 返回一个 Promise，一旦 Promise 的可迭代中的第一个 Promise 完成，它就会完成。如果只有拒绝，则将它们放入 AggregateError 成为拒绝值的其中。\nPromise.any() 只对几个中第一个实现的 Promise 感兴趣时使用。")]),t._v(" "),s("li",[s("code",[t._v("逻辑赋值运算符")]),t._v("："),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])]),t._v(" "),s("li",[s("code",[t._v("下划线 ( _) 作为分隔符")]),t._v("：\n"),s("ul",[s("li",[t._v("数字文字：123_456.789_012")]),t._v(" "),s("li",[t._v("Bigint 字面量：6_000_000_000_000_000_000_000_000n\n"),s("code",[t._v("WeakRefs")])])])])]),t._v(" "),s("h2",{attrs:{id:"es13-ecmascript-2022"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es13-ecmascript-2022"}},[t._v("#")]),t._v(" ES13(ECMAScript 2022)")]),t._v(" "),s("p",[t._v("ES2022 可能会在 2022 年 6 月成为标准。以下提案已进入第 4 阶段，并计划成为该标准的一部分：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("班级新成员")]),t._v("：\n"),s("ul",[s("li",[t._v("现在可以通过以下方式创建属性（公共插槽）：\n"),s("ul",[s("li",[t._v("实例公共字段")]),t._v(" "),s("li",[t._v("静态公共字段")])])]),t._v(" "),s("li",[t._v("私有插槽是新的，可以通过以下方式创建：\n"),s("ul",[s("li",[t._v("私有字段（实例私有字段和静态私有字段）")]),t._v(" "),s("li",[t._v("私有方法和访问器（非静态和静态）")])])]),t._v(" "),s("li",[t._v("静态初始化块")])])]),t._v(" "),s("li",[s("code",[t._v("私有插槽检查")]),t._v("：以下表达式检查是否obj有私有插槽#privateSlot："),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("#privateSlot "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" obj\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])]),t._v(" "),s("li",[s("code",[t._v("模块中的顶层 await")]),t._v("：我们现在可以在模块 await 的顶层使用，而不必再输入异步函数或方法。")]),t._v(" "),s("li",[s("code",[t._v("error.cause")]),t._v("：Error 及其子类现在让我们指定哪个错误导致了当前错误："),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Something went wrong'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("cause")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" otherError"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])]),t._v(" "),s("li",[s("code",[t._v(".at()")]),t._v(" 可索引值的方法让我们可以读取给定索引处的元素（如括号运算符[]）并支持负索引（与括号运算符不同）。"),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("at")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'a'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("at")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'c'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),t._v("以下“可索引”类型具有方法.at()：\n"),s("ul",[s("li",[t._v("string")]),t._v(" "),s("li",[t._v("Array")]),t._v(" "),s("li",[t._v("所有类型化数组类：Uint8Array 等。")])])]),t._v(" "),s("li",[s("code",[t._v("RegExp 匹配索引")]),t._v("：如果我们向正则表达式添加一个标志，使用它会生成匹配对象，记录每个组捕获的开始和结束索引。")]),t._v(" "),s("li",[s("code",[t._v("Object.hasOwn(obj, propKey)")]),t._v(" 提供了一种安全的方法来检查对象 obj 是否具有带有 key 的自己的属性 propKey。与相比 Object.prototype.hasOwnProperty，它适用于所有对象。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);