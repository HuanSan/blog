(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{386:function(s,n,e){"use strict";e.r(n);var a=e(10),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"nginx高并发配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx高并发配置"}},[s._v("#")]),s._v(" nginx高并发配置")]),s._v(" "),n("p",[n("code",[s._v("vim /etc/nginx/nginx.conf")])]),s._v(" "),n("div",{staticClass:"language-conf line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('user root;\nworker_processes 6; # 根据CPU核数配置 cat /proc/cpuinfo| grep "processor"| wc -l\nworker_rlimit_nofile 65535; # 一个nginx进程打开的最多文件描述符数目\n\n# 工作模式与连接数上限\nevents {\n\tworker_connections 65535; # 单个进程最大连接数（最大连接数=连接数*进程\n    # 参考事件模型,use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型,如果跑在FreeBSD上面,就用kqueue模型.\n\tuse epoll; # Linux内核为处理大批量文件选择的模式\n}\n\nhttp {\n    sendfile on; # 开启高效文件传输模式\n\ttcp_nopush on; # 需要在sendfile开启模式才有效，防止网路阻塞，积极的减少网络报文段的数量。\n\ttcp_nodelay on;\n\tkeepalive_timeout 65;\n\ttypes_hash_max_size 2048;\n\n    keepalive_requests 100; // 每个 keep-alive 连接的请求次数\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[n("code",[s._v("vim /etc/sysctl.conf")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 打开文件句柄数量\nfs.file-max = 655360\n# 最大ip跟踪数\nnet.nf_conntrack_max = 655360\n#表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为2分钟。\nnet.netfilter.nf_conntrack_tcp_timeout_established = 120\n\n# 允许系统打开的端口范围，扩大端口数\nnet.ipv4.ip_local_port_range = 10000 65535\n\n# 用来限制监听(LISTEN)队列最大数据包的数量，超过这个数量就会导致链接超时或者触发重传机制，\nnet.core.somaxconn = 65535\n# 每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。\nnet.core.netdev_max_backlog = 262144\n\n# 开启时就是同一个源IP来连接同一个目的端口的数据包时间戳必须是递增的，否则就丢弃\nnet.ipv4.tcp_timestamps = 0\n# 是否启用timewait 快速回收。如果服务器身处NAT环境，tcp_timestamps为1，安全起见，要禁止\nnet.ipv4.tcp_tw_recycle = 1\n# 开启重用。允许将TIME-WAIT sockets 重新用于新的TCP 连接。\nnet.ipv4.tcp_tw_reuse = 1\n# timeout状态时间\nnet.ipv4.tcp_fin_timeout = 15\n\n# 在TIME_WAIT数量等于该值时，不会有新的产生，\nnet.ipv4.tcp_max_tw_buckets = 262144\n# 系统中最多有多少个TCP 套接字不被关联到任何一个用户文件句柄上。如果超过这个数字，孤儿连接将即刻被复位并打印出警告信息。\nnet.ipv4.tcp_max_orphans = 262144\n# 是指定所能接受SYN同步包的最大客户端数量。\nnet.ipv4.tcp_max_syn_backlog = 262144\n# 为了打开对端的连接，内核需要发送一个SYN，以确认收到上一个 SYN连接请求包。也就是所谓三次握手中的第二次握手。\n# 这个设置决定了内核放弃连接之前发送SYN+ACK 包的数量。\nnet.ipv4.tcp_synack_retries = 1\n# 对于一个新建连接，内核要发送多少个 SYN 连接请求才决定放弃，测试感觉两个更稳定\nnet.ipv4.tcp_syn_retries = 2\n# 开启SYN Cookies，当出现SYN 等待队列溢出时，启用cookies 来处理，目的是为了防止syn flood攻击。合法用户的高负载应该调整tcp_max_syn_backlog、tcp_synack_retries属性，\nnet.ipv4.tcp_syncookies = 0\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br")])]),n("p",[n("code",[s._v("/etc/security/limits.conf")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("* soft nofile 65535\n* hard nofile 65535\n* soft nproc 65535\n* hard nproc 65535\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("通过 "),n("code",[s._v("sysctl -p")]),s._v(" 使得配置生效，可用通过 "),n("code",[s._v("ulimit -a")]),s._v(" 查看 file 配置是否生效，临时设置也可用通过 "),n("code",[s._v("ulimit -u 65535")]),s._v(" 配置。")])])}),[],!1,null,null,null);n.default=t.exports}}]);